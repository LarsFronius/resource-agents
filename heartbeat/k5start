#!/bin/sh
#
#
#	k5start OCF RA. Does nothing but wait a few seconds, can be
#	configured to fail occassionally.
#
# Copyright (c) 2004 SUSE LINUX AG, Lars Marowsky-Brée
#                    All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
# See usage() function below for more details...
#
# OCF instance parameters:
#   OCF_RESKEY_binary
#   OCF_RESKEY_keytab
#   OCF_RESKEY_ticketpath
#   OCF_RESKEY_owner
#   OCF_RESKEY_group
#   OCF_RESKEY_principal

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

# Fill in some defaults if no values are specified
OCF_RESKEY_binary_default="/usr/bin/k5start"
OCF_RESKEY_keytab_default="/etc/krb5.keytab"
OCF_RESKEY_ticketpath_default="/tmp/krb5cc_0"
# Maybe this should also get variables from env

: ${OCF_RESKEY_keytab=${OCF_RESKEY_keytab_default}}
: ${OCF_RESKEY_binary=${OCF_RESKEY_binary_default}}
: ${OCF_RESKEY_ticketpath=${OCF_RESKEY_ticketpath_default}}

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="k5start" version="0.1">
<version>0.1</version>

<longdesc lang="en">
This is a Resource Agent for k5start. 
Its purpose is to acquire tickets and renew them.
</longdesc>
<shortdesc lang="en">k5start resource agent</shortdesc>

<parameters>
<parameter name="keytab" unique="0" required="0">
    <longdesc lang="en">
    Path where keytab is located that k5start should use.
    </longdesc>
    <shortdesc>Path to keytab</shortdesc>
    <content type="string" default="${OCF_RESKEY_keytab_default}" />
</parameter>

<parameter name="binary" unique=0" required="0">
    <longdesc lang="en">
    Path to k5start binary.
    </longdesc>
    <shortdesc>Path to k5start binary</shortdesc>
    <content type="string" default="${OCF_RESKEY_binary_default}" />
</parameter>

<parameter name="group" unique="0" required="0">
    <longdesc lang="en">
    After creating the ticket cache, change its group ownership to group, which may be either the name of a group or a numeric group ID.
    </longdesc>
    <shortdesc>Change group ownership of ticket-cache to given group.</shortdesc>
    <content type="string" />
</parameter>

<parameter name="principal" unique="0" required="0">
    <longdesc lang="en">
    This specifies the principal to obtain credentials as. The entire principal may be specified.
    </longdesc>
    <shortdesc>Principal to optain credentials as.</shortdesc>
    <content type="string" />
</parameter>

<parameter name="owner" unique="0" required="0">
    <longdesc lang="en">
    After creating the ticket cache, change its ownership to owner, which may be either the name of a user or a numeric user ID.  If owner is the name of a user and group was not also given, also change the group ownership of the ticket cache to the default group for that user.
    </longdesc>
    <shortdesc>Change owner of ticket-cache to given owner.</shortdesc>
    <content type="string" />
</parameter>

<parameter name="ticketpath" unique="0" required="0">
    <longdesc lang="en">
    Path to write ticket cache out.
    </longdesc>
    <shortdesc>Path to ticket cache</shortdesc>
    <content type="string" default="${OCF_RESKEY_ticketpath_default}" />
</parameter>

</parameters>

<actions>
<action name="start"        timeout="20" />
<action name="stop"         timeout="20" />
<action name="monitor"      timeout="20" interval="10" depth="0" />
<action name="reload"       timeout="20" />
<action name="migrate_to"   timeout="20" />
<action name="migrate_from" timeout="20" />
<action name="meta-data"    timeout="5" />
<action name="validate-all"   timeout="20" />
</actions>
</resource-agent>
END
}

#######################################################################

k5start_options() {
    local options
    options="-f $OCF_RESKEY_keytab -k $OCF_RESKEY_ticketpath"

    if [ $(id -u $OCF_RESKEY_owner) ]; then
        options="$options -o $OCF_RESKEY_owner"
    fi
    if [ $(id -g $OCF_RESKEY_group) ]; then
        options="$options -g $OCF_RESKEY_group"
    fi
    if [ $OCF_RESKEY_principal ]; then
        options="$options -u $OCF_RESKEY_principal"
    else
        options="$options -U"
    fi
    return options
}

k5start_usage() {
	cat <<END
usage: $0 {start|stop|monitor|migrate_to|migrate_from|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

k5start_start() {
    local options
    $options = k5start_options
    k5start_monitor
    if [ $? =  $OCF_SUCCESS ]; then
	return $OCF_SUCCESS
    fi
    touch ${OCF_RESKEY_state}
}

k5start_stop() {
    k5start_monitor
    if [ $? =  $OCF_SUCCESS ]; then
	rm ${OCF_RESKEY_state}
    fi
    return $OCF_SUCCESS
}

k5start_monitor() {
	# Monitor _MUST!_ differentiate correctly between running
	# (SUCCESS), failed (ERROR) or _cleanly_ stopped (NOT RUNNING).
	# That is THREE states, not just yes/no.
	
	if [ -f ${OCF_RESKEY_state} ]; then
	    return $OCF_SUCCESS
	fi
	if false ; then
		return $OCF_ERR_GENERIC
	fi
	return $OCF_NOT_RUNNING
}

k5start_validate() {
    check_binary $OCF_RESKEY_binary

    # Is the state directory writable? 
    state_dir=`dirname "$OCF_RESKEY_state"`
    touch "$state_dir/$$"
    if [ $? != 0 ]; then
	return $OCF_ERR_ARGS
    fi
    rm "$state_dir/$$"

    return $OCF_SUCCESS
}

: ${OCF_RESKEY_state=${HA_RSCTMP}/Dummy-${OCF_RESOURCE_INSTANCE}.state}
: ${OCF_RESKEY_fake="k5start"}

case $__OCF_ACTION in
meta-data)	meta_data
		exit $OCF_SUCCESS
		;;
start)		k5start_start;;
stop)		k5start_stop;;
monitor)	k5start_monitor;;
migrate_to)	ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} to ${OCF_RESKEY_CRM_meta_migrate_target}."
	        k5start_stop
		;;
migrate_from)	ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} from ${OCF_RESKEY_CRM_meta_migrate_source}."
	        k5start_start
		;;
reload)		ocf_log info "Reloading ${OCF_RESOURCE_INSTANCE} ..."
		;;
validate-all)	k5start_validate;;
usage|help)	k5start_usage
		exit $OCF_SUCCESS
		;;
*)		k5start_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc

